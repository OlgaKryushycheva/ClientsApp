// <auto-generated />
using System;
using ClientsApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClientsApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientsApp.Models.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.ClientTask", b =>
                {
                    b.Property<int>("ClientTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientTaskId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int")
                        .HasColumnName("TaskStatus");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("TaskTitle");

                    b.HasKey("ClientTaskId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ExecutorId");

                    b.ToTable("ClientTasks");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.Executor", b =>
                {
                    b.Property<int>("ExecutorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExecutorId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ExecutorId");

                    b.ToTable("Executors");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.ExecutorTask", b =>
                {
                    b.Property<int>("ExecutorTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExecutorTaskId"));

                    b.Property<decimal>("ActualTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AdjustedTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ExecutorId")
                        .HasColumnType("int");

                    b.HasKey("ExecutorTaskId");

                    b.HasIndex("ClientTaskId");

                    b.HasIndex("ExecutorId");

                    b.ToTable("ExecutorTasks");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("ClientTaskId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.ClientTask", b =>
                {
                    b.HasOne("ClientsApp.Models.Entities.Client", "Client")
                        .WithMany("ClientTasks")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientsApp.Models.Entities.Executor", "Executor")
                        .WithMany("ClientTasks")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Executor");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.ExecutorTask", b =>
                {
                    b.HasOne("ClientsApp.Models.Entities.ClientTask", "ClientTask")
                        .WithMany("ExecutorTasks")
                        .HasForeignKey("ClientTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientsApp.Models.Entities.Executor", "Executor")
                        .WithMany("ExecutorTasks")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientTask");

                    b.Navigation("Executor");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.Payment", b =>
                {
                    b.HasOne("ClientsApp.Models.Entities.ClientTask", "ClientTask")
                        .WithMany()
                        .HasForeignKey("ClientTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientTask");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.Client", b =>
                {
                    b.Navigation("ClientTasks");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.ClientTask", b =>
                {
                    b.Navigation("ExecutorTasks");
                });

            modelBuilder.Entity("ClientsApp.Models.Entities.Executor", b =>
                {
                    b.Navigation("ClientTasks");

                    b.Navigation("ExecutorTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
